// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const authenticateUser = `-- name: AuthenticateUser :one
SELECT id, password_hash 
FROM users 
WHERE email = $1 AND is_active = TRUE
`

type AuthenticateUserRow struct {
	ID           int32
	PasswordHash string
}

func (q *Queries) AuthenticateUser(ctx context.Context, email string) (AuthenticateUserRow, error) {
	row := q.db.QueryRow(ctx, authenticateUser, email)
	var i AuthenticateUserRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(*) 
FROM users 
WHERE is_active = TRUE
`

func (q *Queries) CountActiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, role)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, created_at
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
	Role         pgtype.Text
}

type CreateUserRow struct {
	ID        int32
	Username  string
	Email     string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, role, is_active 
FROM users 
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int32
	Username string
	Email    string
	Role     pgtype.Text
	IsActive pgtype.Bool
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, role, created_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID        int32
	Username  string
	Email     string
	Role      pgtype.Text
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET last_login = NOW() 
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}
